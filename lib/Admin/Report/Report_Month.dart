import 'package:flutter/material.dart';
import 'dart:convert';
import 'package:shared_preferences/shared_preferences.dart';
import 'package:intl/intl.dart';
import 'package:intl/date_symbol_data_local.dart';
import 'package:Feedme/constants/config.dart';
import 'package:http/http.dart' as http;
class ReportMonth extends StatefulWidget {
  @override
  _ReportMonthState createState() => _ReportMonthState();
}

class _ReportMonthState extends State<ReportMonth> {
  List<Map<String, dynamic>> allOrders = [];

  @override
  void initState() {
    super.initState();
    _setDefaultLocale(); //  ‡∏Å‡∏≥‡∏´‡∏ô‡∏î Locale
    _loadOrders();
  }

  //  ‡∏Å‡∏≥‡∏´‡∏ô‡∏î locale ‡πÉ‡∏´‡πâ `intl` ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô DateFormat Error
  void _setDefaultLocale() {
    Intl.defaultLocale = 'en_US'; // ‡∏´‡∏£‡∏∑‡∏≠‡πÉ‡∏ä‡πâ 'th_TH' ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢
  }
  Future<void> fetchOrdersFromDB() async {
    final String apiUrl = "http://${Config.BASE_IP}:${Config.BASE_PORT}/api/get_orders";
    try {
      final response = await http.get(Uri.parse(apiUrl));

      if (response.statusCode == 200) {
        List<dynamic> orders = json.decode(response.body);

        // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏•‡∏á SharedPreferences
        SharedPreferences prefs = await SharedPreferences.getInstance();
        await prefs.setString('orders', json.encode(orders));

        print("‚úÖ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÅ‡∏•‡∏∞‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏•‡∏á SharedPreferences");
      } else {
        throw Exception("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡πÑ‡∏î‡πâ");
      }
    } catch (error) {
      print("üö® ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•: $error");
    }
  }
  //  ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡∏à‡∏≤‡∏Å SharedPreferences ‡πÅ‡∏•‡∏∞‡∏Å‡∏£‡∏≠‡∏á‡∏ï‡∏≤‡∏°‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
  Future<void> _loadOrders() async {
    await initializeDateFormatting('th_TH', null); // ‡πÇ‡∏´‡∏•‡∏î locale

    SharedPreferences prefs = await SharedPreferences.getInstance();
    String? ordersString = prefs.getString('orders'); // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å SharedPreferences

    print(" ‡∏Ñ‡πà‡∏≤‡∏à‡∏≤‡∏Å SharedPreferences: $ordersString"); //  ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏à‡∏≤‡∏Å SharedPreferences

    if (ordersString != null) {
      List<Map<String, dynamic>> allOrdersRaw = List<Map<String, dynamic>>.from(json.decode(ordersString));

      // ‡∏î‡∏∂‡∏á‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡πÅ‡∏•‡∏∞‡∏õ‡∏µ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
      DateTime now = DateTime.now();
      String currentMonth = DateFormat('yyyy-MM', 'th_TH').format(now); //  ‡∏£‡∏∞‡∏ö‡∏∏ locale

      print(" ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏Å‡∏£‡∏≠‡∏á: $currentMonth");

      // ‡∏Å‡∏£‡∏≠‡∏á‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
      setState(() {
        allOrders = allOrdersRaw.where((order) {
          String orderDate = order['order_date'] ?? ''; //  ‡πÉ‡∏ä‡πâ order_date ‡∏à‡∏≤‡∏Å‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
          if (orderDate.length < 7) return false; // ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô error ‡∏Å‡∏£‡∏ì‡∏µ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà
          String orderMonth = orderDate.substring(0, 7); // ‡∏ï‡∏±‡∏î‡πÄ‡∏â‡∏û‡∏≤‡∏∞ "YYYY-MM"

          print(" ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö order_date: $orderDate (‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏Å‡∏£‡∏≠‡∏á: $orderMonth)");
          return orderMonth == currentMonth; //  ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        }).toList();
      });

      print(" ‡πÇ‡∏´‡∏•‡∏î‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡∏Ç‡∏≠‡∏á‡πÄ‡∏î‡∏∑‡∏≠‡∏ô: $currentMonth ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô: ${allOrders.length}");
    }
  }


  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏™‡∏£‡∏∏‡∏õ‡∏£‡∏≤‡∏¢‡πÄ‡∏î‡∏∑‡∏≠‡∏ô'),
        backgroundColor: Colors.blue,
      ),
      body: allOrders.isEmpty
          ? Center(child: Text("‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡πÉ‡∏ô‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏ô‡∏µ‡πâ"))
          : ListView.builder(
        padding: const EdgeInsets.all(16.0),
        itemCount: allOrders.length,
        itemBuilder: (context, index) {
          final order = allOrders[index];

          // ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤‡∏°‡∏µ product_name ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ ['‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏']
          List<String> productNames = (order['product_name'] != null)
              ? order['product_name'].toString().split(', ')
              : ['‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏'];

          return buildOrderCard(
            customerName: order['customer_id'].toString(), // üìå ‡πÉ‡∏ä‡πâ customer_id
            totalPrice: order['total'] ?? 0.0,
            orderDate: order['order_date'] ?? '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏', // üìå ‡πÅ‡∏™‡∏î‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà
            productNames: productNames, // üìå ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
          );
        },
      ),
      bottomNavigationBar: BottomAppBar(
        child: ElevatedButton(
          onPressed: () {
            final totalOrders = allOrders.length; // üìå ‡∏ô‡∏±‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠
            final totalRevenue = allOrders.fold<double>(
              0.0,
                  (sum, order) => sum + (order['total'] ?? 0.0), // ‚úÖ ‡πÉ‡∏ä‡πâ total ‡∏ï‡∏£‡∏á‡∏à‡∏≤‡∏Å‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
            );

            showDialog(
              context: context,
              builder: (context) {
                return AlertDialog(
                  title: Text('‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•‡∏£‡∏ß‡∏°'),
                  content: Text(
                    '‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: $totalOrders ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£\n'
                        '‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ‡∏£‡∏ß‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: ${totalRevenue.toStringAsFixed(2)} ‡∏ö‡∏≤‡∏ó',
                  ),
                  actions: [
                    TextButton(
                      onPressed: () => Navigator.pop(context),
                      child: Text('‡∏õ‡∏¥‡∏î'),
                    ),
                  ],
                );
              },
            );
          },
          child: Text('‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•‡∏£‡∏ß‡∏°'),
          style: ElevatedButton.styleFrom(
            minimumSize: Size(double.infinity, 50),
            backgroundColor: Colors.blue,
          ),
        ),
      ),
    );
  }

  // üìå ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏•‡πà‡∏≠‡∏á‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠
  Widget buildOrderCard({
    required String customerName,
    required double totalPrice,
    required String orderDate,
    required List<String> productNames,
  }) {
    return Card(
      elevation: 3,
      margin: const EdgeInsets.symmetric(vertical: 10),
      child: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Text(
              '‡∏£‡∏´‡∏±‡∏™‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤: $customerName',
              style: TextStyle(fontSize: 16, fontWeight: FontWeight.bold),
            ),
            Text(
              '‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠: $orderDate',
              style: TextStyle(fontSize: 14, fontWeight: FontWeight.w500),
            ),
            Divider(),
            Text(
              '‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤:',
              style: TextStyle(fontWeight: FontWeight.bold),
            ),
            productNames.isNotEmpty
                ? Column(
              children: productNames.map((product) {
                return Text('- $product', style: TextStyle(fontSize: 14));
              }).toList(),
            )
                : Text('‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤', style: TextStyle(fontSize: 14, color: Colors.red)),
            Divider(),
            Text(
              '‡∏£‡∏≤‡∏Ñ‡∏≤‡∏£‡∏ß‡∏°: ${totalPrice.toStringAsFixed(2)} ‡∏ö‡∏≤‡∏ó',
              style: TextStyle(fontSize: 16, fontWeight: FontWeight.bold),
            ),
          ],
        ),
      ),
    );
  }
}
