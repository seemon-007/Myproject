import 'dart:convert';
import 'package:Feedme/Page/CartPage.dart';
import 'package:Feedme/Page/product_list.dart';
import 'package:Feedme/constants/config.dart';
import 'package:flutter/material.dart';
import 'package:http/http.dart' as http; // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö API call
import 'package:provider/provider.dart';
import 'package:Feedme/Page/cart_provider.dart';
import 'package:Feedme/Page/mapPage.dart'; // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö MapPage
import 'package:latlong2/latlong.dart'; // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö LatLng

class PaymentPage extends StatefulWidget {
  @override
  _PaymentPageState createState() => _PaymentPageState();
}

class _PaymentPageState extends State<PaymentPage> {
  LatLng _selectedLocation = LatLng(13.7563, 100.5018);
  String _selectedLocationDetails = "‡∏Å‡∏£‡∏∏‡∏á‡πÄ‡∏ó‡∏û‡∏°‡∏´‡∏≤‡∏ô‡∏Ñ‡∏£, ‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡πÑ‡∏ó‡∏¢";
  String _deliveryMethod = "‡∏à‡∏±‡∏î‡∏™‡πà‡∏á"; // ‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏Ñ‡∏∑‡∏≠ "‡∏à‡∏±‡∏î‡∏™‡πà‡∏á"

  Future<void> saveOrder() async {
    final cartProvider = Provider.of<CartProvider>(context, listen: false);
    double totalPrice = cartProvider.getTotalPrice();
    double shippingCost = _deliveryMethod == "‡∏à‡∏±‡∏î‡∏™‡πà‡∏á" ? 50.0 : 0.0;
    double grandTotal = totalPrice + shippingCost;

    final orderData = {
      "customerId": 14,
      "product_name": cartProvider
          .getItems()
          .map((item) => item.productName)
          .join(", "), // ‚úÖ ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ä‡∏∑‡πà‡∏≠ key ‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö API
      "shippingRate": shippingCost,
      "total": grandTotal,
    };

    print("üîç Order Data being sent: $orderData"); // ‚úÖ Debug

    try {
      final response = await http.post(
        Uri.parse('http://${Config.BASE_IP}:${Config.BASE_PORT}/api/orders/save'),
        headers: {'Content-Type': 'application/json'},
        body: json.encode(orderData),
      );

      print("üìù Response Status: ${response.statusCode}");
      print("üìù Response Body: ${response.body}");

      if (response.statusCode == 201) {
        // ‚úÖ ‡πÅ‡∏™‡∏î‡∏á‡∏õ‡πá‡∏≠‡∏õ‡∏≠‡∏±‡∏õ ‡πÅ‡∏•‡∏∞‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤ CartPage
        showDialog(
          context: context,
          builder: (BuildContext context) {
            return AlertDialog(
              title: Text("‚úÖ ‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à"),
              content: Text("‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ‡∏ñ‡∏π‡∏Å‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß"),
              actions: <Widget>[
                TextButton(
                  child: Text("‡∏ï‡∏Å‡∏•‡∏á"),
                  onPressed: () {
                    Navigator.of(context).pop(); // ‡∏õ‡∏¥‡∏î AlertDialog
                    Navigator.popUntil(context,
                        ModalRoute.withName('/CartPage')); // ‚úÖ ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤ Cart
                  },
                ),
              ],
            );
          },
        );

        // ‚úÖ ‡∏•‡πâ‡∏≤‡∏á‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
        cartProvider.clearCart();
      } else {
        showDialog(
          context: context,
          builder: (BuildContext context) {
            return AlertDialog(
              title: Text("‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î"),
              content: Text("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡πÑ‡∏î‡πâ ‡πÇ‡∏õ‡∏£‡∏î‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á"),
              actions: <Widget>[
                TextButton(
                  child: Text("‡∏ï‡∏Å‡∏•‡∏á"),
                  onPressed: () {
                    Navigator.of(context).pop(); // ‡∏õ‡∏¥‡∏î AlertDialog
                  },
                ),
              ],
            );
          },
        );
      }
    } catch (e) {
      print("‚ùå Error sending order: $e");
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(content: Text('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: $e')),
      );
    }
  }

  @override
  Widget build(BuildContext context) {
    final cartProvider = Provider.of<CartProvider>(context);
    double totalPrice = cartProvider.getTotalPrice();
    double shippingCost = _deliveryMethod == "‡∏à‡∏±‡∏î‡∏™‡πà‡∏á" ? 50.0 : 0.0;
    double grandTotal = totalPrice + shippingCost;

    return Scaffold(
      appBar: AppBar(
        title: const Text(
          "Paymant",
          style: TextStyle(color: Colors.white), // ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏™‡∏µ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏µ‡∏Ç‡∏≤‡∏ß
        ),
        backgroundColor: Colors.blue, // ‡∏™‡∏µ‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á‡∏Ç‡∏≠‡∏á AppBar
        elevation: 0,
        centerTitle: true, // ‡πÄ‡∏≠‡∏≤‡πÄ‡∏á‡∏≤‡∏Ç‡∏≠‡∏á AppBar ‡∏≠‡∏≠‡∏Å
      ),
      body: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Text("‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏à‡∏±‡∏î‡∏™‡πà‡∏á",
                style: TextStyle(fontSize: 18, fontWeight: FontWeight.bold)),
            SizedBox(height: 10),
            InkWell(
              onTap: () async {
                final LatLng? newLocation = await Navigator.push(
                  context,
                  MaterialPageRoute(builder: (context) => MapPage()),
                );

                if (newLocation != null) {
                  setState(() {
                    _selectedLocation = newLocation;
                    _selectedLocationDetails =
                        "Lat: ${newLocation.latitude}, Lng: ${newLocation.longitude}";
                  });
                }
              },
              child: Row(
                children: [
                  Expanded(
                    child: Text(
                      _selectedLocationDetails,
                      style: TextStyle(fontSize: 16, color: Colors.blue),
                      overflow: TextOverflow.ellipsis,
                    ),
                  ),
                  Icon(Icons.location_on, color: Colors.red),
                ],
              ),
            ),

            SizedBox(height: 20),

            Text("‡∏ß‡∏¥‡∏ò‡∏µ‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤",
                style: TextStyle(fontSize: 18, fontWeight: FontWeight.bold)),
            SizedBox(height: 10),
            Row(
              mainAxisAlignment: MainAxisAlignment.spaceAround,
              children: [
                ElevatedButton(
                  onPressed: () {
                    setState(() {
                      _deliveryMethod = "‡∏à‡∏±‡∏î‡∏™‡πà‡∏á";
                    });
                  },
                  style: ElevatedButton.styleFrom(
                    backgroundColor: _deliveryMethod == "‡∏à‡∏±‡∏î‡∏™‡πà‡∏á"
                        ? Colors.blue
                        : Colors.grey[200],
                    foregroundColor: _deliveryMethod == "‡∏à‡∏±‡∏î‡∏™‡πà‡∏á"
                        ? Colors.white
                        : Colors.black,
                    minimumSize: Size(150, 50),
                  ),
                  child: Text("‡∏à‡∏±‡∏î‡∏™‡πà‡∏á"),
                ),
                ElevatedButton(
                  onPressed: () {
                    setState(() {
                      _deliveryMethod = "‡∏£‡∏±‡∏ö‡∏ó‡∏µ‡πà‡∏£‡πâ‡∏≤‡∏ô";
                    });
                  },
                  style: ElevatedButton.styleFrom(
                    backgroundColor: _deliveryMethod == "‡∏£‡∏±‡∏ö‡∏ó‡∏µ‡πà‡∏£‡πâ‡∏≤‡∏ô"
                        ? Colors.blue
                        : Colors.grey[200],
                    foregroundColor: _deliveryMethod == "‡∏£‡∏±‡∏ö‡∏ó‡∏µ‡πà‡∏£‡πâ‡∏≤‡∏ô"
                        ? Colors.white
                        : Colors.black,
                    minimumSize: Size(150, 50),
                  ),
                  child: Text("‡∏£‡∏±‡∏ö‡∏ó‡∏µ‡πà‡∏£‡πâ‡∏≤‡∏ô"),
                ),
              ],
            ),

            SizedBox(height: 20),

            Divider(),

            Text("‡∏™‡∏£‡∏∏‡∏õ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠",
                style: TextStyle(fontSize: 18, fontWeight: FontWeight.bold)),
            SizedBox(height: 10),
            ReusableWidget(title: "‡∏£‡∏≤‡∏Ñ‡∏≤‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î", value: totalPrice),
            ReusableWidget(title: "‡∏Ñ‡πà‡∏≤‡∏à‡∏±‡∏î‡∏™‡πà‡∏á", value: shippingCost),
            ReusableWidget(title: "‡∏£‡∏≤‡∏Ñ‡∏≤‡∏£‡∏ß‡∏°", value: grandTotal),

            Spacer(),

            // showDialog(context: context, builder: (BuildContext context) {
            //   return AlertDialog(
            //     title: Text("‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô"),
            //     content: Text("‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?"),
            //     actions: <Widget>[
            //       TextButton(
            //         child: Text("‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å"),
            //         onPressed: () {
            //           Navigator.of(context).pop();
            //         },
            //       ),
            //       TextButton(
            //         child: Text("‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô"),
            //         onPressed: () {
            //
            //       })
            //     ]
            // })

            // ElevatedButton(
            //   onPressed:  saveOrder, // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô saveOrder
            //   style: ElevatedButton.styleFrom(
            //     minimumSize: Size(double.infinity, 50),
            //   ),
            //   child: Text("‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô"),
            // ),
            ElevatedButton(
              onPressed: () {
                showDialog(
                    context: context,
                    builder: (BuildContext context) {
                      return AlertDialog(
                        title: Text("‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô"),
                        content: Text("‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?"),
                        actions: [
                          TextButton(
                            child: Text("‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô"),
                            onPressed: () {
                              saveOrder();
                              Provider.of<CartProvider>(context, listen: false).clearCart(); // ‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
                              Navigator.push(
                                  context,
                                  MaterialPageRoute(
                                      builder: (_) => ProductListPage())
                              );

                              },
                          ),
                        ],
                      );
                    });
              },
              style: ElevatedButton.styleFrom(
                minimumSize: Size(double.infinity, 50),
              ),
              child: Text("‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô"),
            ),
          ],
        ),
      ),
    );
  }
}
