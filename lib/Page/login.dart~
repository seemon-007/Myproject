import 'package:flutter/material.dart';
import 'package:http/http.dart' as http;
import 'package:provider/provider.dart';
import 'dart:convert';
import 'HomePage.dart';
import 'register.dart';
import '../Admin/Admin.dart';
import 'package:Feedme/constants/config.dart';
import 'package:Feedme/Page/UserProvider.dart';
import 'package:shared_preferences/shared_preferences.dart';
void main() {
  runApp(MyApp());
}
Future<void> saveUserData(Map<String, dynamic> userData) async {
  SharedPreferences prefs = await SharedPreferences.getInstance();

  await prefs.setString('user_data', jsonEncode(userData)); // ‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å JSON
  print("üìå Token ‡∏ó‡∏µ‡πà‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å: ${userData['token']}");
  print("‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢: ${jsonEncode(userData)}");
}

Future<void> checkLoginStatus(BuildContext context) async {
  SharedPreferences prefs = await SharedPreferences.getInstance();
  String? userData = prefs.getString("user_data");

  if (userData != null) {
    Map<String, dynamic> user = jsonDecode(userData);
    print("‚úÖ ‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ: ${user['name']}"); // Debug

    // if (user["role"] == "admin") {
    //   Navigator.pushReplacement(
    //     context,
    //     MaterialPageRoute(builder: (context) => LinkPageadmin()),
    //   );
    // } else {
    //   Navigator.pushReplacement(
    //     context,
    //     MaterialPageRoute(builder: (context) => HomePage()),
    //   );
    // }
    if (user["role"] == 'admin') {
      Future.delayed(Duration(milliseconds: 300), () {
        Navigator.pushReplacement(
          context,
          MaterialPageRoute(builder: (context) => LinkPageadmin()),
        );
      });
    } else {
      Future.delayed(Duration(milliseconds: 300), () {
        Navigator.pushReplacement(
          context,
          MaterialPageRoute(builder: (context) => HomePage()),
        );
      });
    }

  }
}


class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      debugShowCheckedModeBanner: false,
      home: LoginPage(),
    );
  }
}

class LoginPage extends StatefulWidget {
  @override
  _LoginPageState createState() => _LoginPageState();
}

class _LoginPageState extends State<LoginPage> {
  final TextEditingController EmailController = TextEditingController();
  final TextEditingController PasswordController = TextEditingController();
  final TextEditingController displayText = TextEditingController();

  Future<void> loginUser() async {
    try {
      // Debug: ‡∏û‡∏¥‡∏°‡∏û‡πå‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡πÉ‡∏ô body
      print('Email: ${EmailController.text}');
      print('Password: ${PasswordController.text}');

      final response = await http.post(
        Uri.parse('http://${Config.BASE_IP}:${Config.BASE_PORT}/api/auth/login1'),
        headers: {'Content-Type': 'application/json'},
        body: json.encode({
          'Email': EmailController.text,
          'Password': PasswordController.text,
        }),
      );

      // Debug: ‡∏û‡∏¥‡∏°‡∏û‡πå status code ‡∏Ç‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö
      print('Response Status Code: ${response.statusCode}');

      if (response.statusCode == 200) {
        final data = json.decode(response.body);

        // Debug: ‡∏û‡∏¥‡∏°‡∏û‡πå response body ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö
        print('Response Body: $data');

        var role = data['results'][0]['role'];

        // Debug: ‡∏û‡∏¥‡∏°‡∏û‡πå role ‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ
        print('Role: $role');
        await saveUserData({
          "customer_id": data["results"][0]["customer_id"],
          "name": data["results"][0]["name"],
          "email": data["results"][0]["Email"],
          "phone": data["results"][0]["Phone"],
          "address": data["results"][0]["address"],
          "role": role,
          "token": data["token"],
        });
        // Provider.of<UserProvider>(context, listen: false).setUserData({
        //   "customer_id": data["results"][0]["customer_id"],
        //   "name": data["results"][0]["name"],
        //   "Email": data["results"][0]["Email"],
        //   "Phone": data["results"][0]["Phone"],
        //   "address": data["results"][0]["address"],
        //   "role": role,
        //   "token": data["token"],
        // });
        setState(() {
          displayText.text = "Login successful!";
        });

        if (role == 'admin') {
          Navigator.push(
            context,
            MaterialPageRoute(builder: (_) => LinkPageadmin()),
          );
        } else {
          Navigator.push(
            context,
            MaterialPageRoute(builder: (_) => HomePage()),
          );
        }
      } else {
        // Debug: ‡∏û‡∏¥‡∏°‡∏û‡πå error message ‡πÄ‡∏°‡∏∑‡πà‡∏≠ login ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß
        print('Login failed with status code: ${response.statusCode}');
        setState(() {
          displayText.text = "Invalid username or Password";
        });
      }
    } catch (e) {
      // Debug: ‡∏û‡∏¥‡∏°‡∏û‡πå‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡∏∂‡πâ‡∏ô
      print('Error during login request: $e');
      setState(() {
        displayText.text = "Error occurred during login!";
      });
    }
  }

  //‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏ô‡∏±‡πâ‡∏ô‡πÄ‡∏Ñ‡∏¢‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡πÅ‡∏•‡πâ‡∏ß
  // @override
  // void initState() {
  //   super.initState();
  //   WidgetsBinding.instance.addPostFrameCallback((_) {
  //     checkLoginStatus(context);
  //   });
  // }

  @override
  void dispose() {
    EmailController.dispose();
    PasswordController.dispose();
    displayText.dispose();
    super.dispose();
  }


  @override
  Widget build(BuildContext context) {
    return Scaffold(
      body: SingleChildScrollView(  // ‡πÉ‡∏ä‡πâ SingleChildScrollView
        padding: const EdgeInsets.all(20.0),
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            Image.asset(
              'assets/images/logo2.png', // ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç path ‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡πÇ‡∏•‡πÇ‡∏Å‡πâ
              height: 250, // ‡∏õ‡∏£‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏π‡∏á‡∏Ç‡∏≠‡∏á‡πÇ‡∏•‡πÇ‡∏Å‡πâ
            ),
            const SizedBox(height: 40.0),
            Text("Login", style: TextStyle(fontSize: 30, fontWeight: FontWeight.bold)),
            const SizedBox(height: 24.0),
            TextField(
              controller: EmailController,
              decoration: InputDecoration(
                labelText: 'ID',
                border: OutlineInputBorder(),
              ),
            ),
            const SizedBox(height: 16.0),
            TextField(
              controller: PasswordController,
              decoration: InputDecoration(
                labelText: 'Password',
                border: OutlineInputBorder(),
              ),
              obscureText: true,
            ),
            const SizedBox(height: 24.0),
            ElevatedButton.icon(
              onPressed: loginUser,
              icon: const Icon(Icons.login),
              label: const Text("Login"),
            ),
            ElevatedButton.icon(
              onPressed: () {
                Navigator.push(
                  context,
                  MaterialPageRoute(builder: (_) => RegisterPage()),
                );
              },
              icon: const Icon(Icons.person_add),
              label: const Text("Register"),
            ),
            const SizedBox(height: 24.0),
            TextField(
              controller: displayText,
              keyboardType: TextInputType.multiline,
              maxLines: null,
              decoration: const InputDecoration(
                border: InputBorder.none,
              ),
            ),
          ],
        ),
      ),
    );
  }
}
